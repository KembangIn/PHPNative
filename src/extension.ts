import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';

let phpServerTerminal: vscode.Terminal | null = null;
let statusBarItem: vscode.StatusBarItem;
let globeStatusBar: vscode.StatusBarItem;
let currentPort: string | null = null;

export function activate(context: vscode.ExtensionContext) {
	console.log('PHPNative Extension Activated ðŸš€');

	// Status bar server info
	statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
	statusBarItem.text = `$(server) PHP Server: Stopped`;
	statusBarItem.tooltip = "Click to start PHP server";
	statusBarItem.command = "phpnative.serve";
	statusBarItem.show();

	// Status bar globe
	globeStatusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 99);
	globeStatusBar.text = `$(globe) Open in Browser`;
	globeStatusBar.tooltip = "Open PHP Server in Browser";
	globeStatusBar.command = "phpnative.openInBrowser";
	globeStatusBar.hide();

	context.subscriptions.push(statusBarItem, globeStatusBar);

	// Command: Create File
	const disposableCreate = vscode.commands.registerCommand('phpnative.createFile', async (uri: vscode.Uri) => {
		const input = await vscode.window.showInputBox({
			prompt: 'Enter PHP file name (e.g., config or view/index)',
			placeHolder: 'config or view/index'
		});

		if (!input) {
			vscode.window.showErrorMessage('File name cannot be empty!');
			return;
		}

		const workspaceFolders = vscode.workspace.workspaceFolders;
		if (!workspaceFolders) {
			vscode.window.showErrorMessage('Open a folder/project in VSCode first!');
			return;
		}

		const rootPath = workspaceFolders[0].uri.fsPath;
		const filePath = path.join(rootPath, input + '.php');

		const dirName = path.dirname(filePath);
		if (!fs.existsSync(dirName)) {
			fs.mkdirSync(dirName, { recursive: true });
		}

		if (!fs.existsSync(filePath)) {
			fs.writeFileSync(filePath, `<?php\n\n// File ${input}.php was auto-generated by PHPNative\n`);
			vscode.window.showInformationMessage(`File created: ${input}.php`);
			const doc = await vscode.workspace.openTextDocument(filePath);
			vscode.window.showTextDocument(doc);
		} else {
			vscode.window.showWarningMessage(`File already exists: ${input}.php`);
		}
	});

	// Command: Quick Server Start
	const disposableServe = vscode.commands.registerCommand('phpnative.serve', async () => {
		const workspaceFolders = vscode.workspace.workspaceFolders;
		if (!workspaceFolders) {
			vscode.window.showErrorMessage('Open a folder/project in Vscode first!');
			return;
		}

		const rootPath = workspaceFolders[0].uri.fsPath;

		if (phpServerTerminal) {
			vscode.window.showWarningMessage("PHP Server is already running. Use 'Stop PHP Server' to stop it.");
			return;
		}

		// Baca default port dari settings
		const config = vscode.workspace.getConfiguration('phpnative');
		const defaultPort = config.get<number>('defaultPort', 8000);

		let selectedPort: string;

		// Jika default port sudah diset di settings, gunakan tanpa bertanya
		if (config.has('defaultPort') && defaultPort !== 8000) {
			selectedPort = defaultPort.toString();
			vscode.window.showInformationMessage(`Using default port from settings: ${selectedPort}`);
		} else {
			// Jika tidak ada setting, tanya user
			const portInput = await vscode.window.showInputBox({
				prompt: 'Enter port for PHP server',
				placeHolder: defaultPort.toString(),
				value: defaultPort.toString()
			});

			if (!portInput) {
				// User membatalkan, gunakan default
				selectedPort = defaultPort.toString();
			} else {
				const portNumber = parseInt(portInput);
				if (isNaN(portNumber) || portNumber < 1024 || portNumber > 65535) {
					vscode.window.showErrorMessage('Port must be a number between 1024 and 65535!');
					return;
				}
				selectedPort = portNumber.toString();
			}
		}

		currentPort = selectedPort;

		phpServerTerminal = vscode.window.createTerminal("PHP Server");
		phpServerTerminal.sendText(`php -S localhost:${currentPort} -t "${rootPath}"`);
		phpServerTerminal.show();

		statusBarItem.text = `$(play) PHP Server: ${currentPort}`;
		statusBarItem.tooltip = "Click to stop PHP server";
		statusBarItem.command = "phpnative.stopServer";
		statusBarItem.show();

		globeStatusBar.show();

		vscode.window.showInformationMessage(`PHP Server is running at http://localhost:${currentPort}`);
	});

	// Command: Stop Server
	const disposableStop = vscode.commands.registerCommand('phpnative.stopServer', () => {
		if (phpServerTerminal) {
			phpServerTerminal.dispose();
			phpServerTerminal = null;
			currentPort = null;

			statusBarItem.text = `$(server) PHP Server: Stopped`;
			statusBarItem.tooltip = "Click to start PHP server";
			statusBarItem.command = "phpnative.serve";
			statusBarItem.show();

			globeStatusBar.hide();

			vscode.window.showInformationMessage("PHP Server is stopped.");
		} else {
			vscode.window.showWarningMessage("No PHP Server is running.");
		}
	});

	// Command: Open root in Browser
	const disposableOpenBrowser = vscode.commands.registerCommand('phpnative.openInBrowser', () => {
		if (!currentPort) {
			vscode.window.showErrorMessage("PHP Server is not running.");
			return;
		}
		vscode.env.openExternal(vscode.Uri.parse(`http://localhost:${currentPort}`));
	});

	// Command: Open specific file in Browser
	const disposableOpenFileBrowser = vscode.commands.registerCommand('phpnative.openFileInBrowser', (uri?: vscode.Uri) => {
		if (!currentPort) {
			vscode.window.showErrorMessage("PHP Server is not running.");
			return;
		}
		const workspaceFolders = vscode.workspace.workspaceFolders;
		if (!workspaceFolders) {
			vscode.window.showErrorMessage('Open a folder/project in VSCode first!');
			return;
		}
		const rootPath = workspaceFolders[0].uri.fsPath;
		const filePath = uri ? uri.fsPath : vscode.window.activeTextEditor?.document.fileName;

		if (!filePath) {
			vscode.window.showErrorMessage("No file is selected.");
			return;
		}

		if (!filePath.startsWith(rootPath)) {
			vscode.window.showErrorMessage("File is not within the active workspace.");
			return;
		}

		const relativePath = path.relative(rootPath, filePath).replace(/\\/g, '/');
		vscode.env.openExternal(vscode.Uri.parse(`http://localhost:${currentPort}/${relativePath}`));
	});

	context.subscriptions.push(
		disposableCreate,
		disposableServe,
		disposableStop,
		disposableOpenBrowser,
		disposableOpenFileBrowser
	);
}

export function deactivate() {
	if (phpServerTerminal) phpServerTerminal.dispose();
	if (statusBarItem) statusBarItem.dispose();
	if (globeStatusBar) globeStatusBar.dispose();
}
